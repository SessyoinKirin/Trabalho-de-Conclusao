{"version":3,"sources":["SQLiteDatabase.ts"],"names":["map","SQLiteResult","zipObject","NativeModules","Platform","RNSqlite2","os","OS","massageError","err","Error","dearrayifyRow","res","rawError","insertId","rowsAffected","columns","rows","unescapeMacIOSAndroid","zippedRows","i","len","length","push","arrayifyQuery","query","sql","escapeMacIOSAndroid","args","escapeBlob","data","replace","row","unescapeBlob","SQLiteDatabase","constructor","name","_name","exec","queries","readOnly","callback","onSuccess","rawResults","results","onError","then"],"mappings":"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","sourcesContent":["import map from 'lodash.map'\nimport SQLiteResult from './SQLiteResult'\nimport zipObject from 'lodash.zipobject'\nimport {NativeModules, Platform} from 'react-native'\nconst {RNSqlite2} = NativeModules\n\nconst os = Platform.OS\n\nfunction massageError(err: string | Error) {\n  return typeof err === 'string' ? new Error(err) : err\n}\n\nfunction dearrayifyRow(res: Array<any>) {\n  // use a compressed array format to send minimal data between\n  // native and web layers\n  var rawError = res[0]\n  if (rawError) {\n    return new SQLiteResult(massageError(res[0]))\n  }\n  var insertId = res[1]\n  if (insertId === null) {\n    insertId = void 0 // per the spec, should be undefined\n  }\n  var rowsAffected = res[2]\n  var columns = res[3]\n  var rows = unescapeMacIOSAndroid(res[4] || [])\n  var zippedRows = []\n  for (var i = 0, len = rows.length; i < len; i++) {\n    zippedRows.push(zipObject(columns, rows[i]))\n  }\n\n  // v8 likes predictable objects\n  return new SQLiteResult(null, insertId, rowsAffected, zippedRows)\n}\n\n// send less data over the wire, use an array\nfunction arrayifyQuery(query: {sql: string; args: Array<any>}) {\n  return [query.sql, escapeMacIOSAndroid(query.args || [])]\n}\n\n// for avoiding strings truncated with '\\u0000'\nfunction escapeMacIOSAndroid(args: Array<any>) {\n  if (os === 'android' || os === 'ios' || os === 'macos') {\n    return map(args, escapeBlob)\n  } else {\n    return args\n  }\n}\n\nfunction escapeBlob(data: any) {\n  if (typeof data === 'string') {\n    return data\n      .replace(/\\u0002/g, '\\u0002\\u0002')\n      .replace(/\\u0001/g, '\\u0001\\u0002')\n      .replace(/\\u0000/g, '\\u0001\\u0001')\n  } else {\n    return data\n  }\n}\n\nfunction unescapeMacIOSAndroid(rows: Array<any>) {\n  if (os === 'android' || os === 'ios' || os === 'macos') {\n    return map(rows, function (row) {\n      return map(row, unescapeBlob)\n    })\n  } else {\n    return rows\n  }\n}\n\ninterface NodeCallback<T> {\n  (err: Error, result?: undefined): void\n  (err: undefined | null, result: T): void\n}\n\nfunction unescapeBlob(data: any) {\n  if (typeof data === 'string') {\n    return data\n      .replace(/\\u0001\\u0001/g, '\\u0000')\n      .replace(/\\u0001\\u0002/g, '\\u0001')\n      .replace(/\\u0002\\u0002/g, '\\u0002')\n  } else {\n    return data\n  }\n}\n\nclass SQLiteDatabase {\n  _name: string\n\n  constructor(name: string) {\n    this._name = name\n  }\n\n  exec(\n    queries: Object[],\n    readOnly: boolean,\n    callback: NodeCallback<Array<SQLiteResult>>\n  ) {\n    function onSuccess(rawResults: Array<any>) {\n      var results = map<any, SQLiteResult>(rawResults, dearrayifyRow)\n      callback(null, results)\n    }\n\n    function onError(err: Error) {\n      callback(massageError(err))\n    }\n\n    RNSqlite2.exec(this._name, map(queries, arrayifyQuery), readOnly).then(\n      onSuccess,\n      onError\n    )\n  }\n}\n\nexport default SQLiteDatabase\n"]}