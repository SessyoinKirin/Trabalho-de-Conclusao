"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  multiply: true
};
exports.default = void 0;
exports.multiply = multiply;

var _reactNative = require("react-native");

var _custom = _interopRequireDefault(require("websql/custom"));

var _SQLiteDatabase = _interopRequireDefault(require("./SQLiteDatabase"));

var _WebsqlDatabase = require("./WebsqlDatabase");

Object.keys(_WebsqlDatabase).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _WebsqlDatabase[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _WebsqlDatabase[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-ignore
if (!process.nextTick) {
  process.nextTick = function (callback) {
    setTimeout(callback, 0);
  };
}

const LINKING_ERROR = `The package 'react-native-sqlite-2' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const Sqlite2 = _reactNative.NativeModules.RNSqlite2 ? _reactNative.NativeModules.RNSqlite2 : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }

});

function multiply(a, b) {
  return Sqlite2.multiply(a, b);
}

let openDB = (0, _custom.default)(_SQLiteDatabase.default);

class SQLitePlugin {
  openDatabase(name, version, description, size, callback) {
    if (name && typeof name === 'object') {
      // accept SQLite Plugin 1-style object here
      callback = typeof version === 'function' ? version : undefined;
      size = name.size;
      description = name.description;
      version = name.version;
      name = name.name;
    }

    if (!size) {
      size = 1;
    }

    if (!description) {
      description = name;
    }

    if (!version) {
      version = '1.0';
    }

    if (typeof name === 'undefined') {
      throw new Error('please be sure to call: openDatabase("myname.db")');
    }

    return openDB(name, version, description, size, callback);
  }

}

var _default = new SQLitePlugin();

exports.default = _default;
//# sourceMappingURL=index.js.map