"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash.map"));

var _SQLiteResult = _interopRequireDefault(require("./SQLiteResult"));

var _lodash2 = _interopRequireDefault(require("lodash.zipobject"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  RNSqlite2
} = _reactNative.NativeModules;
const os = _reactNative.Platform.OS;

function massageError(err) {
  return typeof err === 'string' ? new Error(err) : err;
}

function dearrayifyRow(res) {
  // use a compressed array format to send minimal data between
  // native and web layers
  var rawError = res[0];

  if (rawError) {
    return new _SQLiteResult.default(massageError(res[0]));
  }

  var insertId = res[1];

  if (insertId === null) {
    insertId = void 0; // per the spec, should be undefined
  }

  var rowsAffected = res[2];
  var columns = res[3];
  var rows = unescapeMacIOSAndroid(res[4] || []);
  var zippedRows = [];

  for (var i = 0, len = rows.length; i < len; i++) {
    zippedRows.push((0, _lodash2.default)(columns, rows[i]));
  } // v8 likes predictable objects


  return new _SQLiteResult.default(null, insertId, rowsAffected, zippedRows);
} // send less data over the wire, use an array


function arrayifyQuery(query) {
  return [query.sql, escapeMacIOSAndroid(query.args || [])];
} // for avoiding strings truncated with '\u0000'


function escapeMacIOSAndroid(args) {
  if (os === 'android' || os === 'ios' || os === 'macos') {
    return (0, _lodash.default)(args, escapeBlob);
  } else {
    return args;
  }
}

function escapeBlob(data) {
  if (typeof data === 'string') {
    return data.replace(/\u0002/g, '\u0002\u0002').replace(/\u0001/g, '\u0001\u0002').replace(/\u0000/g, '\u0001\u0001');
  } else {
    return data;
  }
}

function unescapeMacIOSAndroid(rows) {
  if (os === 'android' || os === 'ios' || os === 'macos') {
    return (0, _lodash.default)(rows, function (row) {
      return (0, _lodash.default)(row, unescapeBlob);
    });
  } else {
    return rows;
  }
}

function unescapeBlob(data) {
  if (typeof data === 'string') {
    return data.replace(/\u0001\u0001/g, '\u0000').replace(/\u0001\u0002/g, '\u0001').replace(/\u0002\u0002/g, '\u0002');
  } else {
    return data;
  }
}

class SQLiteDatabase {
  constructor(name) {
    _defineProperty(this, "_name", void 0);

    this._name = name;
  }

  exec(queries, readOnly, callback) {
    function onSuccess(rawResults) {
      var results = (0, _lodash.default)(rawResults, dearrayifyRow);
      callback(null, results);
    }

    function onError(err) {
      callback(massageError(err));
    }

    RNSqlite2.exec(this._name, (0, _lodash.default)(queries, arrayifyQuery), readOnly).then(onSuccess, onError);
  }

}

var _default = SQLiteDatabase;
exports.default = _default;
//# sourceMappingURL=SQLiteDatabase.js.map