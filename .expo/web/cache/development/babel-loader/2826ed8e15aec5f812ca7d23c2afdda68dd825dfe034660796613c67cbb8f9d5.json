{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport function NativeSafeAreaProvider(_ref) {\n  var children = _ref.children,\n    style = _ref.style,\n    onInsetsChange = _ref.onInsetsChange;\n  React.useEffect(function () {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    var element = createContextElement();\n    document.body.appendChild(element);\n    var onEnd = function onEnd() {\n      var _window$getComputedSt = window.getComputedStyle(element),\n        paddingTop = _window$getComputedSt.paddingTop,\n        paddingBottom = _window$getComputedSt.paddingBottom,\n        paddingLeft = _window$getComputedSt.paddingLeft,\n        paddingRight = _window$getComputedSt.paddingRight;\n      var insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      var frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      };\n      onInsetsChange({\n        nativeEvent: {\n          insets: insets,\n          frame: frame\n        }\n      });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return function () {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return React.createElement(View, {\n    style: style\n  }, children);\n}\nvar _supportedTransitionEvent = null;\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent != null) {\n    return _supportedTransitionEvent;\n  }\n  var element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (var key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent;\n}\nvar _supportedEnv = null;\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  var _window = window,\n    CSS = _window.CSS;\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\nfunction getInset(side) {\n  return getSupportedEnv() + \"(safe-area-inset-\" + side + \")\";\n}\nfunction createContextElement() {\n  var element = document.createElement('div');\n  var style = element.style;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}","map":{"version":3,"mappings":"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","names":["React","CSSTransitions","WebkitTransition","Transition","MozTransition","MSTransition","OTransition","NativeSafeAreaProvider","children","_ref","style","onInsetsChange","useEffect","document","element","createContextElement","body","appendChild","onEnd","window","getComputedStyle","paddingTop","paddingBottom","paddingLeft","paddingRight","insets","top","parseInt","bottom","left","right","frame","x","y","width","documentElement","offsetWidth","height","offsetHeight","nativeEvent","addEventListener","getSupportedTransitionEvent","removeChild","removeEventListener","View","_supportedTransitionEvent","createElement","key","undefined","_supportedEnv","getSupportedEnv","CSS","supports","getInset","side","position","zIndex","overflow","visibility","transitionDuration","transitionProperty","transitionDelay"],"sources":["D:\\6Semestre\\TrabalhoDeConclusao\\node_modules\\react-native-safe-area-context\\src\\NativeSafeAreaProvider.web.tsx"],"sourcesContent":["/* eslint-env browser */\n\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport type { NativeSafeAreaProviderProps } from './SafeArea.types';\n\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions: Record<string, string> = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd',\n};\n\nexport function NativeSafeAreaProvider({\n  children,\n  style,\n  onInsetsChange,\n}: NativeSafeAreaProviderProps) {\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n    const onEnd = () => {\n      const { paddingTop, paddingBottom, paddingLeft, paddingRight } =\n        window.getComputedStyle(element);\n\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0,\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight,\n      };\n      // @ts-ignore: missing properties\n      onInsetsChange({ nativeEvent: { insets, frame } });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n\n  return <View style={style}>{children}</View>;\n}\n\nlet _supportedTransitionEvent: string | null | undefined = null;\nfunction getSupportedTransitionEvent(): string {\n  if (_supportedTransitionEvent != null) {\n    return _supportedTransitionEvent;\n  }\n  const element = document.createElement('invalidtype');\n\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (const key in CSSTransitions) {\n    if (element.style[key as keyof CSSStyleDeclaration] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent as string;\n}\n\ntype CssEnv = 'constant' | 'env';\n\nlet _supportedEnv: CssEnv | null = null;\nfunction getSupportedEnv(): CssEnv {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  const { CSS } = window;\n  if (\n    CSS &&\n    CSS.supports &&\n    CSS.supports('top: constant(safe-area-inset-top)')\n  ) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\n\nfunction getInset(side: string): string {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\n\nfunction createContextElement(): HTMLElement {\n  const element = document.createElement('div');\n  const { style } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}