{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport map from 'lodash.map';\nimport SQLiteResult from \"./SQLiteResult\";\nimport zipObject from 'lodash.zipobject';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNSqlite2 = NativeModules.RNSqlite2;\nvar os = Platform.OS;\nfunction massageError(err) {\n  return typeof err === 'string' ? new Error(err) : err;\n}\nfunction dearrayifyRow(res) {\n  var rawError = res[0];\n  if (rawError) {\n    return new SQLiteResult(massageError(res[0]));\n  }\n  var insertId = res[1];\n  if (insertId === null) {\n    insertId = void 0;\n  }\n  var rowsAffected = res[2];\n  var columns = res[3];\n  var rows = unescapeMacIOSAndroid(res[4] || []);\n  var zippedRows = [];\n  for (var i = 0, len = rows.length; i < len; i++) {\n    zippedRows.push(zipObject(columns, rows[i]));\n  }\n  return new SQLiteResult(null, insertId, rowsAffected, zippedRows);\n}\nfunction arrayifyQuery(query) {\n  return [query.sql, escapeMacIOSAndroid(query.args || [])];\n}\nfunction escapeMacIOSAndroid(args) {\n  if (os === 'android' || os === 'ios' || os === 'macos') {\n    return map(args, escapeBlob);\n  } else {\n    return args;\n  }\n}\nfunction escapeBlob(data) {\n  if (typeof data === 'string') {\n    return data.replace(/\\u0002/g, \"\\x02\\x02\").replace(/\\u0001/g, \"\\x01\\x02\").replace(/\\u0000/g, \"\\x01\\x01\");\n  } else {\n    return data;\n  }\n}\nfunction unescapeMacIOSAndroid(rows) {\n  if (os === 'android' || os === 'ios' || os === 'macos') {\n    return map(rows, function (row) {\n      return map(row, unescapeBlob);\n    });\n  } else {\n    return rows;\n  }\n}\nfunction unescapeBlob(data) {\n  if (typeof data === 'string') {\n    return data.replace(/\\u0001\\u0001/g, \"\\0\").replace(/\\u0001\\u0002/g, \"\\x01\").replace(/\\u0002\\u0002/g, \"\\x02\");\n  } else {\n    return data;\n  }\n}\nvar SQLiteDatabase = function () {\n  function SQLiteDatabase(name) {\n    _classCallCheck(this, SQLiteDatabase);\n    _defineProperty(this, \"_name\", void 0);\n    this._name = name;\n  }\n  _createClass(SQLiteDatabase, [{\n    key: \"exec\",\n    value: function exec(queries, readOnly, callback) {\n      function onSuccess(rawResults) {\n        var results = map(rawResults, dearrayifyRow);\n        callback(null, results);\n      }\n      function onError(err) {\n        callback(massageError(err));\n      }\n      RNSqlite2.exec(this._name, map(queries, arrayifyQuery), readOnly).then(onSuccess, onError);\n    }\n  }]);\n  return SQLiteDatabase;\n}();\nexport default SQLiteDatabase;","map":{"version":3,"mappings":"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","names":["map","SQLiteResult","zipObject","RNSqlite2","NativeModules","os","Platform","OS","massageError","err","Error","dearrayifyRow","res","rawError","insertId","rowsAffected","columns","rows","unescapeMacIOSAndroid","zippedRows","i","len","length","push","arrayifyQuery","query","sql","escapeMacIOSAndroid","args","escapeBlob","data","replace","row","unescapeBlob","SQLiteDatabase","constructor","name","_defineProperty","_name","exec","queries","readOnly","callback","onSuccess","rawResults","results","onError","then"],"sources":["D:\\6Semestre\\TrabalhoDeConclusao\\node_modules\\react-native-sqlite-2\\lib\\module\\SQLiteDatabase.ts"],"sourcesContent":["import map from 'lodash.map'\nimport SQLiteResult from './SQLiteResult'\nimport zipObject from 'lodash.zipobject'\nimport {NativeModules, Platform} from 'react-native'\nconst {RNSqlite2} = NativeModules\n\nconst os = Platform.OS\n\nfunction massageError(err: string | Error) {\n  return typeof err === 'string' ? new Error(err) : err\n}\n\nfunction dearrayifyRow(res: Array<any>) {\n  // use a compressed array format to send minimal data between\n  // native and web layers\n  var rawError = res[0]\n  if (rawError) {\n    return new SQLiteResult(massageError(res[0]))\n  }\n  var insertId = res[1]\n  if (insertId === null) {\n    insertId = void 0 // per the spec, should be undefined\n  }\n  var rowsAffected = res[2]\n  var columns = res[3]\n  var rows = unescapeMacIOSAndroid(res[4] || [])\n  var zippedRows = []\n  for (var i = 0, len = rows.length; i < len; i++) {\n    zippedRows.push(zipObject(columns, rows[i]))\n  }\n\n  // v8 likes predictable objects\n  return new SQLiteResult(null, insertId, rowsAffected, zippedRows)\n}\n\n// send less data over the wire, use an array\nfunction arrayifyQuery(query: {sql: string; args: Array<any>}) {\n  return [query.sql, escapeMacIOSAndroid(query.args || [])]\n}\n\n// for avoiding strings truncated with '\\u0000'\nfunction escapeMacIOSAndroid(args: Array<any>) {\n  if (os === 'android' || os === 'ios' || os === 'macos') {\n    return map(args, escapeBlob)\n  } else {\n    return args\n  }\n}\n\nfunction escapeBlob(data: any) {\n  if (typeof data === 'string') {\n    return data\n      .replace(/\\u0002/g, '\\u0002\\u0002')\n      .replace(/\\u0001/g, '\\u0001\\u0002')\n      .replace(/\\u0000/g, '\\u0001\\u0001')\n  } else {\n    return data\n  }\n}\n\nfunction unescapeMacIOSAndroid(rows: Array<any>) {\n  if (os === 'android' || os === 'ios' || os === 'macos') {\n    return map(rows, function (row) {\n      return map(row, unescapeBlob)\n    })\n  } else {\n    return rows\n  }\n}\n\ninterface NodeCallback<T> {\n  (err: Error, result?: undefined): void\n  (err: undefined | null, result: T): void\n}\n\nfunction unescapeBlob(data: any) {\n  if (typeof data === 'string') {\n    return data\n      .replace(/\\u0001\\u0001/g, '\\u0000')\n      .replace(/\\u0001\\u0002/g, '\\u0001')\n      .replace(/\\u0002\\u0002/g, '\\u0002')\n  } else {\n    return data\n  }\n}\n\nclass SQLiteDatabase {\n  _name: string\n\n  constructor(name: string) {\n    this._name = name\n  }\n\n  exec(\n    queries: Object[],\n    readOnly: boolean,\n    callback: NodeCallback<Array<SQLiteResult>>\n  ) {\n    function onSuccess(rawResults: Array<any>) {\n      var results = map<any, SQLiteResult>(rawResults, dearrayifyRow)\n      callback(null, results)\n    }\n\n    function onError(err: Error) {\n      callback(massageError(err))\n    }\n\n    RNSqlite2.exec(this._name, map(queries, arrayifyQuery), readOnly).then(\n      onSuccess,\n      onError\n    )\n  }\n}\n\nexport default SQLiteDatabase\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}