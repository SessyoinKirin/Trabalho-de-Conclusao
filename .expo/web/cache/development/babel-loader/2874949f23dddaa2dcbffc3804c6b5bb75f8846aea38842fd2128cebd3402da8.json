{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect } from 'react';\nimport ExpoKeepAwake from \"./ExpoKeepAwake\";\nexport var ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    if (ExpoKeepAwake.isAvailableAsync) {\n      return yield ExpoKeepAwake.isAvailableAsync();\n    }\n    return true;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function useKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  useEffect(function () {\n    var isMounted = true;\n    activateKeepAwakeAsync(tag).then(function () {\n      if (isMounted && ExpoKeepAwake.addListenerForTag && options != null && options.listener) {\n        addListener(tag, options.listener);\n      }\n    });\n    return function () {\n      isMounted = false;\n      if (options != null && options.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(function () {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\nexport function activateKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  console.warn('`activateKeepAwake` is deprecated. Use `activateKeepAwakeAsync` instead.');\n  return activateKeepAwakeAsync(tag);\n}\nexport function activateKeepAwakeAsync() {\n  return _activateKeepAwakeAsync.apply(this, arguments);\n}\nfunction _activateKeepAwakeAsync() {\n  _activateKeepAwakeAsync = _asyncToGenerator(function* () {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n    yield ExpoKeepAwake.activate == null ? void 0 : ExpoKeepAwake.activate(tag);\n  });\n  return _activateKeepAwakeAsync.apply(this, arguments);\n}\nexport function deactivateKeepAwake() {\n  return _deactivateKeepAwake.apply(this, arguments);\n}\nfunction _deactivateKeepAwake() {\n  _deactivateKeepAwake = _asyncToGenerator(function* () {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n    yield ExpoKeepAwake.deactivate == null ? void 0 : ExpoKeepAwake.deactivate(tag);\n  });\n  return _deactivateKeepAwake.apply(this, arguments);\n}\nexport function addListener(tagOrListener, listener) {\n  if (!ExpoKeepAwake.addListenerForTag) {\n    throw new UnavailabilityError('ExpoKeepAwake', 'addListenerForTag');\n  }\n  var tag = typeof tagOrListener === 'string' ? tagOrListener : ExpoKeepAwakeTag;\n  var _listener = typeof tagOrListener === 'function' ? tagOrListener : listener;\n  return ExpoKeepAwake.addListenerForTag(tag, _listener);\n}\nexport * from \"./KeepAwake.types\";","map":{"version":3,"mappings":";AAAA,SAAuBA,mBAAmB,QAAQ,mBAAmB;AACrE,SAASC,SAAS,QAAQ,OAAO;AAEjC,OAAOC,aAAa;AAIpB,OAAO,IAAMC,gBAAgB,GAAG,yBAAyB;AAGzD,gBAAsBC,gBAAgB;EAAA;AAAA;AAKrC;EAAA,sCALM,aAA+B;IACpC,IAAIF,aAAa,CAACE,gBAAgB,EAAE;MAClC,aAAaF,aAAa,CAACE,gBAAgB,EAAE;;IAE/C,OAAO,IAAI;EACb,CAAC;EAAA;AAAA;AAWD,OAAM,SAAUC,YAAY,GAA2D;EAAA,IAA1DC,0EAAcH,gBAAgB;EAAA,IAAEI,OAA0B;EACrFN,SAAS,CAAC,YAAK;IACb,IAAIO,SAAS,GAAG,IAAI;IACpBC,sBAAsB,CAACH,GAAG,CAAC,CAACI,IAAI,CAAC,YAAK;MACpC,IAAIF,SAAS,IAAIN,aAAa,CAACS,iBAAiB,IAAIJ,OAAO,YAAPA,OAAO,CAAEK,QAAQ,EAAE;QACrEC,WAAW,CAACP,GAAG,EAAEC,OAAO,CAACK,QAAQ,CAAC;;IAEtC,CAAC,CAAC;IACF,OAAO,YAAK;MACVJ,SAAS,GAAG,KAAK;MACjB,IAAID,OAAO,YAAPA,OAAO,CAAEO,0BAA0B,EAAE;QACvCC,mBAAmB,CAACT,GAAG,CAAC,CAACU,KAAK,CAAC,YAAK,CAAE,CAAC,CAAC;OACzC,MAAM;QACLD,mBAAmB,CAACT,GAAG,CAAC;;IAE5B,CAAC;EACH,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;AACX;AAeA,OAAM,SAAUW,iBAAiB,GAA+B;EAAA,IAA9BX,0EAAcH,gBAAgB;EAC9De,OAAO,CAACC,IAAI,CAAC,0EAA0E,CAAC;EACxF,OAAOV,sBAAsB,CAACH,GAAG,CAAC;AACpC;AAcA,gBAAsBG,sBAAsB;EAAA;AAAA;AAE3C;EAAA,4CAFM,aAAoE;IAAA,IAA9BH,0EAAcH,gBAAgB;IACzE,MAAMD,aAAa,CAACkB,QAAQ,oBAAtBlB,aAAa,CAACkB,QAAQ,CAAGd,GAAG,CAAC;EACrC,CAAC;EAAA;AAAA;AAUD,gBAAsBS,mBAAmB;EAAA;AAAA;AAExC;EAAA,yCAFM,aAAiE;IAAA,IAA9BT,0EAAcH,gBAAgB;IACtE,MAAMD,aAAa,CAACmB,UAAU,oBAAxBnB,aAAa,CAACmB,UAAU,CAAGf,GAAG,CAAC;EACvC,CAAC;EAAA;AAAA;AAcD,OAAM,SAAUO,WAAW,CACzBS,aAAyC,EACzCV,QAA4B;EAG5B,IAAI,CAACV,aAAa,CAACS,iBAAiB,EAAE;IACpC,MAAM,IAAIX,mBAAmB,CAAC,eAAe,EAAE,mBAAmB,CAAC;;EAGrE,IAAMM,GAAG,GAAG,OAAOgB,aAAa,KAAK,QAAQ,GAAGA,aAAa,GAAGnB,gBAAgB;EAChF,IAAMoB,SAAS,GAAG,OAAOD,aAAa,KAAK,UAAU,GAAGA,aAAa,GAAGV,QAAQ;EAEhF,OAAOV,aAAa,CAACS,iBAAiB,CAACL,GAAG,EAAEiB,SAAS,CAAC;AACxD;AAEA","names":["UnavailabilityError","useEffect","ExpoKeepAwake","ExpoKeepAwakeTag","isAvailableAsync","useKeepAwake","tag","options","isMounted","activateKeepAwakeAsync","then","addListenerForTag","listener","addListener","suppressDeactivateWarnings","deactivateKeepAwake","catch","activateKeepAwake","console","warn","activate","deactivate","tagOrListener","_listener"],"sources":["D:\\6Semestre\\TrabalhoDeConclusao\\node_modules\\expo-keep-awake\\src\\index.ts"],"sourcesContent":["import { Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect } from 'react';\n\nimport ExpoKeepAwake from './ExpoKeepAwake';\nimport { KeepAwakeListener, KeepAwakeOptions } from './KeepAwake.types';\n\n/** Default tag, used when no tag has been specified in keep awake method calls. */\nexport const ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\n\n/** @returns `true` on all platforms except [unsupported web browsers](https://caniuse.com/wake-lock). */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (ExpoKeepAwake.isAvailableAsync) {\n    return await ExpoKeepAwake.isAvailableAsync();\n  }\n  return true;\n}\n\n/**\n * A React hook to keep the screen awake for as long as the owner component is mounted.\n * The optionally provided `tag` argument is used when activating and deactivating the keep-awake\n * feature. If unspecified, the default `tag` is used. See the documentation for `activateKeepAwakeAsync`\n * below to learn more about the `tag` argument.\n *\n * @param tag Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @param options Additional options for the keep awake hook.\n */\nexport function useKeepAwake(tag: string = ExpoKeepAwakeTag, options?: KeepAwakeOptions): void {\n  useEffect(() => {\n    let isMounted = true;\n    activateKeepAwakeAsync(tag).then(() => {\n      if (isMounted && ExpoKeepAwake.addListenerForTag && options?.listener) {\n        addListener(tag, options.listener);\n      }\n    });\n    return () => {\n      isMounted = false;\n      if (options?.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(() => {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n *\n * Web support [is limited](https://caniuse.com/wake-lock).\n *\n * @param tag Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @deprecated use `activateKeepAwakeAsync` instead.\n */\nexport function activateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  console.warn('`activateKeepAwake` is deprecated. Use `activateKeepAwakeAsync` instead.');\n  return activateKeepAwakeAsync(tag);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n *\n * Web support [is limited](https://caniuse.com/wake-lock).\n *\n * @param tag Tag to lock screen sleep prevention. If not provided, the default tag is used.\n */\nexport async function activateKeepAwakeAsync(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.activate?.(tag);\n}\n\n// @needsAudit\n/**\n * Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag`\n * is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.\n *\n * @param tag Tag to release the lock on screen sleep prevention. If not provided,\n * the default tag is used.\n */\nexport async function deactivateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.deactivate?.(tag);\n}\n\n/**\n * Observe changes to the keep awake timer.\n * On web, this changes when navigating away from the active window/tab. No-op on native.\n * @platform web\n *\n * @example\n * ```ts\n * KeepAwake.addListener(({ state }) => {\n *   // ...\n * });\n * ```\n */\nexport function addListener(\n  tagOrListener: string | KeepAwakeListener,\n  listener?: KeepAwakeListener\n): Subscription {\n  // Assert so the type is non-nullable.\n  if (!ExpoKeepAwake.addListenerForTag) {\n    throw new UnavailabilityError('ExpoKeepAwake', 'addListenerForTag');\n  }\n\n  const tag = typeof tagOrListener === 'string' ? tagOrListener : ExpoKeepAwakeTag;\n  const _listener = typeof tagOrListener === 'function' ? tagOrListener : listener;\n\n  return ExpoKeepAwake.addListenerForTag(tag, _listener);\n}\n\nexport * from './KeepAwake.types';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}